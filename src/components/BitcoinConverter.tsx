
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { bitcoinToEvmAddress, isValidBitcoinAddress } from '@/utils/crypto';
import { Copy, ArrowDown } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';

const BitcoinConverter = () => {
  const [bitcoinAddress, setBitcoinAddress] = useState('');
  const [evmAddress, setEvmAddress] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleConvert = () => {
    setError('');
    
    if (!bitcoinAddress) {
      setError('Please enter a Bitcoin address');
      return;
    }

    if (!isValidBitcoinAddress(bitcoinAddress)) {
      setError('Invalid Bitcoin address format');
      return;
    }

    setIsLoading(true);
    
    try {
      // Add a small delay to show the loading state (better UX)
      setTimeout(() => {
        const result = bitcoinToEvmAddress(bitcoinAddress);
        setEvmAddress(result);
        setIsLoading(false);
      }, 500);
    } catch (err) {
      setIsLoading(false);
      setError(err instanceof Error ? err.message : 'An unknown error occurred');
    }
  };

  const handleCopy = () => {
    if (evmAddress) {
      navigator.clipboard.writeText(evmAddress);
      toast({
        title: "Address copied!",
        description: "BRC2.0 EVM address copied to clipboard",
      });
    }
  };

  return (
    <Card className="w-full max-w-lg mx-auto overflow-hidden animate-fade-in shadow-lg border-t-2 border-t-bitcoin border-b-2 border-b-ethereum">
      <CardHeader className="bg-gradient-to-r from-bitcoin/10 to-ethereum/10 text-center pb-6">
        <CardTitle className="text-2xl">Bitcoin to BRC2.0 EVM Address Converter</CardTitle>
        <CardDescription className="text-sm">
          Convert Bitcoin addresses to checksummed BRC2.0 EVM addresses
        </CardDescription>
      </CardHeader>
      <CardContent className="p-6 space-y-6">
        <div className="space-y-3">
          <label htmlFor="bitcoin-address" className="block text-sm font-medium">
            Bitcoin Address
          </label>
          <Input
            id="bitcoin-address"
            placeholder="Enter Bitcoin address"
            value={bitcoinAddress}
            onChange={(e) => setBitcoinAddress(e.target.value)}
            className="font-mono text-sm"
          />
          {error && <p className="text-destructive text-sm">{error}</p>}
        </div>

        <div className="flex justify-center py-2">
          <Button
            onClick={handleConvert}
            disabled={isLoading}
            className="bg-gradient-to-r from-bitcoin to-ethereum hover:opacity-90 text-white"
          >
            {isLoading ? 'Converting...' : 'Convert'}
            <ArrowDown className="ml-2 h-4 w-4" />
          </Button>
        </div>

        <div className="space-y-3">
          <label htmlFor="evm-address" className="block text-sm font-medium">
            BRC2.0 EVM Address (Checksummed)
          </label>
          <div className="flex">
            <Input
              id="evm-address"
              readOnly
              value={evmAddress}
              className="font-mono text-sm"
              placeholder="Converted address will appear here"
            />
            <Button
              variant="outline"
              size="icon"
              onClick={handleCopy}
              disabled={!evmAddress}
              className="ml-2"
            >
              <Copy className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {evmAddress && (
          <div className="mt-4 p-3 bg-muted rounded-md animate-pulse-slow">
            <p className="text-xs text-center">
              This BRC2.0 EVM address was generated by applying keccak256 to the Bitcoin address
              public key script and taking the last 20 bytes, then checksummed per EIP-55.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default BitcoinConverter;
